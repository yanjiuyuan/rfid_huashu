@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage" style="position:relative;">
    <div class="head-fixed" onclick="goHome()">
        <i class="el-icon-arrow-left"></i>
        {{FlowName}}-{{nodeInfo.NodeName}}
    </div>
    <p style="font-size:24px;">总价预计 <span style="color:red;font-size:24px;">{{totalPrice}}</span>元</p>
    <el-collapse v-model="activeNames">
        <el-collapse-item v-for="(d,i) in data" :name="i+1" :key="i">
            <template slot="title">
                <span style="font-size:16px;">部门名称:{{d.name}},请购总价预计</span>
                <span style="color:red;">{{d.tmpTotalPrice}}</span>元
            </template>
            <el-table :data="d.value" stripe border>
                <el-table-column prop="CodeNo" label="物料编码"></el-table-column>
                <el-table-column prop="Name" label="物料名称"></el-table-column>
                <el-table-column prop="Standard" label="规格型号"></el-table-column>
                <el-table-column prop="Unit" label="单位"></el-table-column>
                <el-table-column prop="Price" label="预计单价"></el-table-column>
                <el-table-column prop="Count" label="数量"></el-table-column>
                <el-table-column prop="totalPrice" label="总价"></el-table-column>
                <el-table-column prop="Purpose" label="用途"></el-table-column>
                <el-table-column label="是否删除" width="150" v-if="NodeId == 2 && index == 0">
                    <template slot-scope="scope">
                        <el-button size="mini" @*v-if="NodeId == 2"*@ :type="scope.row.IsDelete?'primary':'danger'" v-on:click="setState(scope.$index, scope.row)">{{scope.row.IsDelete?'还原':'删除'}}</el-button>
                        <span :class="{'redFont':scope.row.IsDelete,'greenFont':!scope.row.IsDelete}">{{scope.row.IsDelete?'已删除':'正常'}}</span>
                    </template>
                </el-table-column>
            </el-table>
        </el-collapse-item>
    </el-collapse>

    <el-form v-on:submit.native.prevent :model="ruleForm" :rules="rules" ref="ruleForm" label-width="120px" class="demo-ruleForm">
        @RenderPage("~/Views/Shared/endForm.cshtml")
        @RenderPage("~/Views/Shared/endButton.cshtml")
        <template v-if="state=='已完成'">
            <el-form-item>
                <el-button type="primary" v-on:click="printTable" :disabled="disablePage">打印表单</el-button>
            </el-form-item>
        </template>
    </el-form>
</el-main>

<script>
    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                activeNames: [1, 2, 3, 4, 5, 6],
                data:[],
                //totalPrice:0,
            }
        },
        methods: {
            onSubmit() {
                console.log('submit!')
                var that = this
                if (NodeId == '2') {
                    let url = '/OfficeSuppliesPurchase/ModifyTable'
                    var param = []
                    for (let d of that.data) {
                        for (let v of d.value) {
                            param.push(v)
                        }
                    }
                    console.log(JSON.stringify(param))
                    that._postData(url, function (data) {
                        that.aggreSubmit()
                    }, param)
                }
                else {
                    this.aggreSubmit()
                }
            },
            //打印表单
            printTable() {
                this.PostData('OfficeSuppliesPurchase/PrintPDF', {
                    UserId: DingData.userid,
                    TaskId: TaskId
                }, () => { this.elementAlert('提示信息', '获取成功，请在工作通知中查收') })
            },
            //设置BOM表单状态
            setState(index, row) {
                row.IsDelete = !row.IsDelete
                for (let d of this.data) {
                    if (d.name == row.Dept) {
                        if (row.IsDelete) {
                            d.tmpTotalPrice = parseFloat((d.tmpTotalPrice - row.totalPrice).toFixed(2))
                        } else {
                            d.tmpTotalPrice = parseFloat((d.tmpTotalPrice + row.totalPrice).toFixed(2))
                        }
                    }
                }
            },
            getBomInfo() {
                var that = this
                this._getData("/OfficeSuppliesPurchase/ReadTable" , function (data) {
                    that.data = []
                    console.log('获取bom表')
                    console.log(data)
                    var deptList = []
                    var deptStr = ''
                    for (let d of data) {
                        if (d.Dept && deptStr.indexOf(d.Dept) < 0) {
                            deptStr = deptStr + d.Dept + ','
                        }
                    }
                    deptStr = deptStr.substring(0, deptStr.length - 1)
                    deptList = deptStr.split(',')
                    console.log(deptStr)
                    console.log(deptList)
                    for (let d of deptList) {
                        that.data.push({
                            name: d,
                            value: [],
                            tmpTotalPrice: 0
                        })
                    }
                    for (let d of data) {
                        for (let l of that.data) {
                            if (d.Dept == l.name) {
                                d['totalPrice'] = (d.Price * d.Count).toFixed(2)
                                l.value.push(d)
                                l.tmpTotalPrice += (d.Price * d.Count)
                                l.tmpTotalPrice = parseFloat(l.tmpTotalPrice.toFixed(2))
                                break
                            }
                        }
                    }
                }, { TaskId: TaskId })
            }
        },
        computed: {
            totalPrice() {
                let tmpPrice = 0
                for (let l of this.data) {
                    for (let v of l.value) {
                        if (!v.Price || v.IsDelete) continue
                        let price = parseFloat(v.Price).toFixed(2)
                        if (!price) price == 0
                        tmpPrice += price * v.Count
                    }
                }
                return tmpPrice.toFixed(2)
            }
        },
        created: function () {
            this.initEnd(() => { this.getBomInfo() })
        }
    })

</script>



