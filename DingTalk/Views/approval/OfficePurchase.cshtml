@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage" style="position:relative;">
    <!--标题-->
    <div class="head-fixed" onclick="loadPage('/Main/approval')">
        <i class="el-icon-arrow-left"></i>
        {{FlowName}}-{{nodeInfo.NodeName}}
    </div>
    <!--搜索-->
    <div style="margin-bottom:10px;">
        <span style="color:red">*</span><span style="padding:3px;">日期</span>
        <el-date-picker v-model="searchDate"
                        type="daterange" :ediTable="false"
                        :picker-options="pickerOptions"
                        value-format="yyyy-MM-dd"
                        range-separator="至"
                        start-placeholder="开始日期"
                        end-placeholder="结束日期">
        </el-date-picker>
        <el-button type="primary" v-on:click="searchCode">搜索</el-button>
    </div>
    <!--物料列表表格實體-->
    <p style="font-size:24px;">总价预计  <span style="color:red;font-size:24px;">{{totalPrice}}</span>元</p>
    <el-collapse v-model="activeNames">
        <el-collapse-item v-for="(d,i) in purchaseList" :name="i+1" :key="i">
            <template slot="title">
                <span style="font-size:20px;">部门名称:{{d.name}},请购总价预计</span>
                <span style="color:red;">{{d.tmpTotalPrice}}</span>元
            </template>
            <el-Table :data="d.value" stripe border>
                <el-Table-column prop="CodeNo" label="物料编码"></el-Table-column>
                <el-Table-column prop="Name" label="物料名称"></el-Table-column>
                <el-Table-column prop="Standard" label="规格型号"></el-Table-column>
                <el-Table-column prop="Unit" label="单位"></el-Table-column>
                <el-Table-column prop="Count" label="数量"></el-Table-column>
                <el-Table-column prop="Price" label="预计单价">
                    <template slot-scope="scope">
                        <el-input v-model="scope.row.Price" v-on:change="compute" min="0" type="number" :class="{ redborder:scope.row.Price ==''}"></el-input>
                    </template>
                </el-Table-column>
                <el-Table-column prop="Purpose" label="用途">
                    <template slot-scope="scope">
                        <sam-input :value.sync="scope.row.Purpose"></sam-input>
                    </template>
                </el-Table-column>
                <el-Table-column label="操作">
                    <template slot-scope="scope">
                        <el-button size="mini" v-on:click="deleteItem(scope.$index, scope.row)">删除</el-button>
                    </template>
                </el-Table-column>
            </el-Table>
        </el-collapse-item>
    </el-collapse>

    <el-form v-on:submit.native.prevent :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm"
             id="uploadForm" enctype="multipart/form-data">
        @RenderPage("~/Views/Shared/startForm.cshtml")
        @RenderPage("~/Views/Shared/startButton.cshtml")
    </el-form>
</el-main>

<script>
    var deptList = []
    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                searchDate:[],
                searchForm: {
                    name: '',
                },
                purchaseList:[],
                activeNames: [1, 2, 3, 4, 5, 6],
            }
        },
        methods: {
            onSubmit() {
                var that = this
                let valid = false
                for (let d of that.purchaseList) {
                    for (let v of d.value) {
                        if(d.value.length>0) valid = true
                        if (v.Price == '') {
                            this.elementAlert('提示信息', '有单价未填')
                            return
                        }
                    }
                }
                if (!valid) {
                    this.elementAlert('提示信息', '没有采购数据')
                    return
                }
                let url = '/OfficeSuppliesPurchase/SaveTable'
                let callBack = function (taskId) {
                    console.log(taskId)
                    var param = []
                    for (let d of that.purchaseList) {
                        for (let v of d.value) {
                            v.TaskId = taskId
                            param.push(v)
                        }
                    }
                    console.log(JSON.stringify(param))
                    that._postData(url, function (data) {
                        that.$alert('恭喜提交成功', '提示信息', {
                            confirmButtonText: '确定',
                            callback: action => {
                                goHome()
                            }
                        })
                    }, param)
                }
                that.approvalSubmit(callBack)
            },
            //删除不需要的物品
            deleteItem(index, row) {
                console.log(row)
                for (let d of this.purchaseList) {
                    if (row.dept == d.name) {
                        d.tmpTotalPrice = parseFloat(d.tmpTotalPrice - row.Price * row.Count).toFixed(2)
                        d.value.splice(index, 1)
                    }
                }
            },
            //搜索列表
            searchCode(formName) {
                var that = this
                if (!this.searchDate[0]) return
                var url = '/OfficeSuppliesPurchase/GetTable?startTime=' + that.searchDate[0] + '&endTime=' + that.searchDate[1] + ' 23:59:59'
                $.ajax({
                    url: url,
                    success: function (data) {
                        console.log(url)
                        console.log(data)
                        that.purchaseList = []
                        var deptStr = ''
                        for (let d of data) {
                            if (d.dept && deptStr.indexOf(d.dept) < 0) {
                                deptStr = deptStr + d.dept + ','
                            }
                        }
                        deptStr = deptStr.substring(0, deptStr.length - 1)
                        deptList = deptStr.split(',')
                        for (let d of deptList) {
                            that.purchaseList.push({
                                name: d,
                                value: [],
                                tmpTotalPrice: 0
                            })
                        }
                        for (let d of data) {
                            for (let l of that.purchaseList) {
                                if (d.dept == l.name) {
                                    d.Price = d.ExpectPrice
                                    l.value.push(d)
                                    l.tmpTotalPrice += (d.Price * d.Count)
                                    break
                                }
                            }
                        }
                        for (let p of that.purchaseList) {
                            p.tmpTotalPrice = p.tmpTotalPrice.toFixed(2)
                        }
                        that.totalRows = data.length
                    }
                })
            },
            compute() {
                for (let l of this.purchaseList) {
                    l.tmpTotalPrice = 0
                }
                for (let l of this.purchaseList) {
                    for (let v of l.value) {
                        if (!v.Price) continue
                        let price = parseFloat(v.Price).toFixed(2)
                        if (!price) price == 0
                        l.tmpTotalPrice += price * v.Count
                    }
                }
            }
        },
        computed: {
            totalPrice(){
                let tmpPrice = 0
                for (let l of this.purchaseList) {
                    for (let v of l.value) {
                        if (!v.Price) continue
                        let price = parseFloat(v.Price).toFixed(2)
                        if (!price) price == 0
                        tmpPrice += price * v.Count
                    }
                } 
                return tmpPrice.toFixed(2)
            }
        },
        created: function () {
            this.initStart()
        }
    })

</script>



