@{
    Layout = null;
}
<!--右侧实体内容-->
<el-main id="partPage" style="position:relative;">
    <div class="head-fixed" onclick="loadPage('/Main/approval')">
        <i class="el-icon-arrow-left"></i>
        {{FlowName}}-{{nodeInfo.NodeName}}
    </div>
    <el-form v-on:submit.native.prevent :model="ruleForm" :rules="rules" :inline="false" ref="ruleForm" label-width="140px" class="demo-ruleForm">
        @RenderPage("~/Views/Shared/startForm.cshtml")
        <el-form-item label="项目名称" prop="ProjectId">
            <el-select v-model="ruleForm.ProjectId" placeholder="请选择" style="width:500px;" v-on:change="selectProject" filterable>
                <el-option v-for="item in projectList"
                           :key="item.ProjectId"
                           :label="item.ProjectId + '-' + item.ProjectName"
                           :value="item.ProjectId">
                    <span style="float: left"> {{item.ProjectId}}-{{ item.ProjectName }} </span>
                    <span style="float: right; color: #8492a6; font-size: 13px"></span>
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <el-form v-on:submit.native.prevent :model="tableForm" :rules="rules" :inline="false" ref="tableForm" label-width="140px" class="demo-ruleForm">
        <el-form-item label="项目类型">
            <el-input v-model="tableForm.ProjectType " style="width:200px;" :disabled="true"></el-input>
        </el-form-item>
        <el-form-item label="项目负责人">
            <el-input v-model="tableForm.ResponsibleMan" style="width:200px;" :disabled="true"></el-input>
        </el-form-item>
        <el-form-item label="小组成员">
            <el-input v-model="tableForm.TeamMembers" type="textarea" autosize style="width:500px;" :disabled="true"></el-input>
        </el-form-item>
        <el-form-item label="计划开始时间">
            <el-input v-model="tableForm.StartTime" style="width:200px;" :disabled="true"></el-input>
        </el-form-item>
        <el-form-item label="计划结束时间">
            <el-input v-model="tableForm.EndTime" style="width:200px;" :disabled="true"></el-input>
        </el-form-item>
        <el-form-item label="项目周期" v-if="doneloadTmp">
            <sam-timerange :value1.sync="tableForm.ActualCycleStart" :value2.sync="tableForm.ActualCycleEnd"></sam-timerange>
        </el-form-item>
        <el-form-item label="项目相关数据">
            <el-table :data="purchaseList" stripe border>
                <el-table-column type="index"></el-table-column>
                <el-table-column v-for="(value,key) in DetailedListConfig" :prop="key" :label="value" :key="key">
                </el-table-column>
            </el-table>
        </el-form-item>


        <el-form-item label="是否有横向合作单位">
            <el-radio-group v-model="tableForm.IsTransverse" v-on:change="heng">
                <el-radio :label=true>是</el-radio>
                <el-radio :label=false>否</el-radio>
            </el-radio-group>
        </el-form-item>
        <template v-if="tableForm.IsTransverse">
            <el-form-item label="合同金额" prop="ContractAmount">
                <el-input v-model="tableForm.ContractAmount"></el-input>
            </el-form-item>
            <el-form-item label="合同编码" prop="ContractNo">
                <el-input v-model="tableForm.ContractNo"></el-input>
            </el-form-item>
            <el-form-item label="实际到账" prop="ActualMoney">
                <el-input v-model="tableForm.ActualMoney"></el-input>
            </el-form-item>
            <el-table :data="ApplicationUnit" stripe border>
                <el-table-column type="index"></el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <el-button size="mini" type="danger" v-on:click="deleteApplicationUnit(scope.$index, scope.row)">删除</el-button>
                    </template>
                </el-table-column>
                <el-table-column v-for="(value,key) in ApplicationUnitConfig" :prop="key" :label="value" :key="key">
                    <template slot-scope="scope">
                        <el-input v-model="scope.row[key]"></el-input>
                    </template>
                </el-table-column>
            </el-table>
            <el-form-item v-for="(value,key) in ApplicationUnitConfig" :label="value" :key="key" required="required">
                <sam-input :value.sync="table1[key]" :required="true"></sam-input>
            </el-form-item>
            <el-button v-on:click="addApplicationUnit" type="primary" plain> + 添加</el-button>
        </template>


        <el-form-item label="是否有申报纵向项目">
            <el-radio-group v-model="tableForm.IsPortrait" v-on:change="zhong">
                >
                <el-radio :label=true>是</el-radio>
                <el-radio :label=false>否</el-radio>
            </el-radio-group>
        </el-form-item>
        <template v-if="tableForm.IsPortrait">
            <el-table :data="LongitudinalProject" stripe border>
                <el-table-column type="index"></el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <el-button size="mini" type="danger" v-on:click="deleteLongitudinalProject(scope.$index, scope.row)">删除</el-button>
                    </template>
                </el-table-column>
                <el-table-column v-for="(value,key) in LongitudinalProjectConfig" :prop="key" :label="value" :key="key">
                    <template slot-scope="scope">
                        <el-input v-model="scope.row[key]"></el-input>
                    </template>
                </el-table-column>
            </el-table>
            <el-form-item v-for="(value,key) in LongitudinalProjectConfig" :label="value" :key="key" required="required">
                <el-input v-model="table1[key]"></el-input>
            </el-form-item>
            <el-button v-on:click="addLongitudinalProject" type="primary" plain> + 添加</el-button>
        </template>



        <template v-for="config in uploadFileConfig" style="border:1px solid">
            <el-form-item :label="config.label" :required="config.must" label-width="220px">
                <el-upload class="upload-demo"
                           :file-list="config.fileList"
                           action="/drawingupload/Upload"
                           :on-remove="handleRemove"
                           :before-remove="beforeRemoveFile"
                           :before-upload="BeforeFileUpload"
                           :on-success="handleSuccess"
                           :limit="5"
                           :on-exceed="handleExceed"
                           multiple>
                    <el-button v-on:click="upClick(config.attribute)" size="small" type="primary">点击上传</el-button>
                    <div v-on:click="upClick(config.attribute)" class="el-upload__tip" slot="tip">{{config.point}}</div>
                </el-upload>
            </el-form-item>
            <hr />
        </template>
    </el-form>
    <el-form v-on:submit.native.prevent :model="ruleForm" :rules="rules" ref="ruleForm" label-width="130px" class="demo-ruleForm"
             enctype="multipart/form-data">
        @RenderPage("~/Views/Shared/startButton.cshtml")
    </el-form>
</el-main>

<script>
    let attribute = ''//切换对应上传文件用
    let loadingState = {}
    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                uploadFileConfig: [
                    {
                        label: '立项书或建议书',
                        attribute: 'SuggestBook1',
                        point: '系统有的内容自动关联文件，没有就是手动上传',
                        fileList: [],
                        must: true
                    },
                    {
                        label: '评审PPT',
                        attribute: 'PPT2',
                        point: '系统有的内容自动关联文件，没有就是手动上传',
                        fileList: [],
                        must: true
                    },
                    {
                        label: '需求规格说明书、产品总体设计书',
                        attribute: 'DemandBook3',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '机械设计图纸',
                        attribute: 'Drawing4',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '电气图纸',
                        attribute: 'Electrical5',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: 'BOM表',
                        attribute: 'Bom6',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '软件源代码',
                        attribute: 'SourceCode7',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '使用说明书/操作手册/技术方案/规格说明书',
                        attribute: 'UseBook8',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '合作协议',
                        attribute: 'CooperationAgreement9',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '产品（样机/成品）图片/影像',
                        attribute: 'Product10',
                        point: '打包上传',
                        fileList: [],
                        must: true
                    },
                    {
                        label: '阶段性整理的问题的分析、解决方案及计划表',
                        attribute: 'Solution11',
                        point: '打包上传',
                        fileList: [],
                        must: true
                    },
                    {
                        label: '纵向项目申请/中期检查/验收资料',
                        attribute: 'AcceptanceData14',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '其他过程文档设计报告、评审报告、项目计划、设计更改报告等',
                        attribute: 'ProcessDocumentation15',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '项目终止情况报告',
                        attribute: 'TerminationReport16',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '装箱单',
                        attribute: 'PackingList17',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    },
                    {
                        label: '客户验收单',
                        attribute: 'AcceptanceSlip18',
                        point: '打包上传',
                        fileList: [],
                        must: false
                    }],
                timeRange: [],
                LongitudinalProjectConfig: {
                    Name: '申报政策名称',
                    No: '专项专题编号',
                    Money: '国拨经费/万',
                    ActualMoney: '实际到账/万'
                },
                ApplicationUnitConfig: {
                    ApplicationUnitName: '转化/应用单位',
                    Customer: '客户/联系人',
                    Post: '职务',
                    Tel: '联系方式'
                },
                DetailedListConfig: {
                    Type: '类型',
                    ApplyMan : '申请人',
                    ApplyTime: '申请时间',
                    OldtaskId: '流水号'
                },
                table1: {},
                LongitudinalProject: [],//纵向，表1
                ApplicationUnit: [],//横向，表2
                purchaseList: [],//项目相关数据，类型(项目采购清单、借用清单、领料清单、入库清单、借用清单、维修清单、受理知识产权清单)
                projectFundingList: [],//项目经费使用情况
                rules: {
                    ActualCycleStart: { required: true, message: '项目开发周期不能为空', trigger: 'blur' },
                    ActualCycleEnd: { required: true, message: '项目开发周期不能为空', trigger: 'blur' },
                    ContractAmount: { required: true, message: '合同金额不能为空', trigger: 'blur' },
                    ContractNo: { required: true, message: '合同编码不能为空', trigger: 'blur' },
                    ActualMoney: { required: true, message: '实际到账不能为空', trigger: 'blur' },
                    ProjectId: { required: true, message: '项目不能为空', trigger: 'blur' }
                }
            }
        },
        methods: {
            heng(value) {
                console.log(value)
                this.uploadFileConfig[15].must = value
            },
            zhong(value) {
                console.log(value)
                this.uploadFileConfig[11].must = value
            },
            handleRemove(file, fileList) {
                console.log(file, fileList);
            },
            handlePreview(file) {
                console.log(file);
            },
            handleExceed(files, fileList) {
                this.$message.warning(`当前限制选择 3 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
            },
            beforeRemove(file, fileList) {
                console.log('beforeRemove~~~~')
                return false
                return this.$confirm(`确定移除 ${file.name}？`);
            },

            //删除表格项
            deleteLongitudinalProject(index) {
                this.LongitudinalProject.splice(index, 1)
            },
            addLongitudinalProject() {
                for (let p in this.LongitudinalProjectConfig) {
                    if (!this.table1[p]) {
                        this.$message.error('请输入有效值!')
                        return
                    }
                }
                this.LongitudinalProject.push(_cloneObj(this.table1))
                for (let p in this.LongitudinalProjectConfig) {
                    this.table1[p] = ''
                }
            },
            deleteApplicationUnit(index) {
                this.ApplicationUnit.splice(index, 1)
            },
            addApplicationUnit() {
                for (let p in this.ApplicationUnitConfig) {
                    if (!this.table1[p]) {
                        this.$message.error('请输入有效值!')
                        return
                    }
                }
                this.ApplicationUnit.push(_cloneObj(this.table1))
                for (let p in this.ApplicationUnitConfig) {
                    this.table1[p] = ''
                }
            },

            onSubmit(formName) {
                for (let con of this.uploadFileConfig) {
                    if (con.must && !this.tableForm[con.attribute]) {
                        this.$alert(con.label + ' 未上传', '提示信息')
                        return
                    }
                }
                if (this.tableForm.IsTransverse && this.ApplicationUnit.length == 0) {
                    this.$alert('未填写转化/应用单位情况表', '提示信息')
                    return
                }
                if (this.tableForm.IsPortrait && this.LongitudinalProject.length == 0) {
                    this.$alert('未填写纵向项目基本情况表', '提示信息')
                    return
                }
                let callBack = (taskId) => {
                    this.tableForm['TaskId'] = taskId
                    for (let det of this.purchaseList) {
                        det['TaskId'] = taskId
                    }
                    for (let long of this.LongitudinalProject) {
                        long['TaskId'] = taskId
                    }
                    for (let app of this.ApplicationUnit) {
                        app['TaskId'] = taskId
                    }
                    let param = {
                        projectClosure: this.tableForm,
                        detailedLists: this.purchaseList,
                        applicationUnitList: this.ApplicationUnit,
                        projectFundingList: this.projectFundingList,
                        longitudinalProject: this.LongitudinalProject,
                    }
                    console.log(JSON.stringify(param))
                    this.PostData('ProjectClosure/Save', param, () => {
                        this.$alert('恭喜提交成功', '提示信息', {
                            confirmButtonText: '确定',
                            callback: action => {
                                goHome()
                            }
                        })
                    })
                }
                this.approvalSubmit(callBack)
            },
            selectProject(id) { 
                console.log(id)
                for (var proj of this.projectList) {
                    if (proj.ProjectId == id) {
                        delete proj.ApplyMan
                        delete proj.ApplyManId
                        //Object.assign(this.ruleForm, proj)
                        this.ruleForm.ProjectId = proj.ProjectId
                        this.ruleForm.ProjectName = proj.ProjectName
                        Object.assign(this.tableForm, proj)
                        this.tableForm['ProjectType'] = proj.ProjectType + '(' + proj.ProjectSmallType + ')'
                        if (proj.ProjectType == '产品类' || proj.ProjectType == '教育类') this.uploadFileConfig[14].must = true
                        proj.ProjectType == '研发类' && proj.ProjectSmallType == '横向' ? this.uploadFileConfig[15].must = true : this.uploadFileConfig[15].must = false
                    }
                }
                //根据项目显示文件
                this.GetData('ProjectClosure/ReadDefault?projectId=' + id, (res) => {
                    this.uploadFileConfig[0].fileList = []
                    this.uploadFileConfig[1].fileList = []
                    if (!res.fileUrl) {
                        this.tableForm['SuggestBook1'] = ''
                        this.tableForm['PPT2'] = ''
                        return
                    }
                    let param1 = []
                    let param2 = []
                    let fileUrl = res.fileUrl.split(',')
                    let mediaId = res.mediaId.split(',')
                    let fileName = res.fileName.split(',')
                    for (let i = 0; i < fileName.length; i++) {
                        let file = {
                            "name": fileName[i],
                            "mediaid": mediaId[i],
                            "response": {
                                "Content": fileUrl[i]
                            }
                        }
                        let param = {
                            "FileUrl": fileUrl[i],
                            "MediaId": mediaId[i],
                            "FileName": fileName[i]
                        }

                        if (fileName[i].indexOf('ppt') > 0 || fileName[i].indexOf('pptx') > 0) {
                            this.uploadFileConfig[1].fileList.push(file)
                            param2.push(param)
                        } else {
                            this.uploadFileConfig[0].fileList.push(file)
                            param1.push(param)
                        }
                    }
                    console.log(this.uploadFileConfig[0])
                    console.log(this.uploadFileConfig[1])
                    console.log(param1)
                    console.log(param2)
                    this.tableForm['SuggestBook1'] = JSON.stringify(param1)
                    this.tableForm['PPT2'] = JSON.stringify(param2)
                 
                })
                //根据项目显示bom
                this.GetData('ProjectClosure/ReadFlowInfo?projectId=' + id, (res) => {
                    this.purchaseList = res
                })
            },
            //加载重新发起审批传递的数据
            loadReApprovalData() {
                if (!ReApprovalTempData.valid) return
                this.ruleForm = ReApprovalTempData.ruleForm
                this.tableForm = ReApprovalTempData.tableForm
                this.LongitudinalProject = ReApprovalTempData.LongitudinalProject
                this.ApplicationUnit = ReApprovalTempData.ApplicationUnit
                this.purchaseList = ReApprovalTempData.DetailedList
                this.ProjectFundingList = ReApprovalTempData.ProjectFundingList

                for (let con of this.uploadFileConfig) {
                    if (this.tableForm[con.attribute]) {
                        let urlObj = JSON.parse(this.tableForm[con.attribute])
                        for (let obj of urlObj) {
                            con.fileList.push({
                                name: obj.FileName,
                                path: obj.FileUrl
                            })
                        }
                    }
                }
                for (var proj of this.projectList) {
                    if (proj.ProjectId == this.ruleForm.ProjectId) {
                        delete proj.ApplyMan
                        delete proj.ApplyManId
                        //Object.assign(this.ruleForm, proj)
                        Object.assign(this.tableForm, proj)
                        this.tableForm['ProjectType'] = proj.ProjectType + '(' + proj.ProjectSmallType + ')'
                        if (proj.ProjectType == '产品类' || proj.ProjectType == '教育类') this.uploadFileConfig[14].must = true
                        proj.ProjectType == '研发类' && proj.ProjectSmallType == '横向' ? this.uploadFileConfig[15].must = true : this.uploadFileConfig[15].must = false
                    }
                }
                ReApprovalTempData.valid = false
                this.purchaseList = ReApprovalTempData.data
            },
            //加载临时保存传递的数据
            loadTempData() {
                for (let p of slParam) {
                    let data = this.loadData(FlowId + '-' + p)
                    if (getLocalObj(FlowId + '-' + p)) {
                        data = getLocalObj(FlowId + '-' + p)
                    }
                    if (data) {
                        this[p] = data
                        this.saveData(p, null)
                    }
                }
                localStorage.clear()
                for (let con of this.uploadFileConfig) {
                    if (this.tableForm[con.attribute]) {
                        let urlObj = JSON.parse(this.tableForm[con.attribute])
                        for (let obj of urlObj) {
                            con.fileList.push({
                                name: obj.FileName,
                                path: obj.FileUrl
                            })
                        }
                    }
                }
                for (var proj of this.projectList) {
                    if (proj.ProjectId == this.ruleForm.ProjectId) {
                        delete proj.ApplyMan
                        delete proj.ApplyManId
                        //Object.assign(this.ruleForm, proj)
                        Object.assign(this.tableForm, proj)
                        this.tableForm['ProjectType'] = proj.ProjectType + '(' + proj.ProjectSmallType + ')'
                        if (proj.ProjectType == '产品类' || proj.ProjectType == '教育类') this.uploadFileConfig[14].must = true
                        proj.ProjectType == '研发类' && proj.ProjectSmallType == '横向' ? this.uploadFileConfig[15].must = true : this.uploadFileConfig[15].must = false
                    }
                }
            },
            //文件上传处理方法
            handleExceed(files, fileList) {
                this.$message.warning(`当前限制选择 5 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
            },
            upClick(attr) {
                console.log(attr)
                attribute = attr
            },
            beforeRemoveFile(file, fileList) {
                console.log(file)
                return this.$confirm(`确定移除 ${file.name}？`);
            },
            handleRemove(file, fileList) {
                let param = []
                for (let file of fileList) {
                    param.push({
                        "FileUrl": file.response.Content,
                        "MediaId": file.media_id,
                        "FileName": file.name
                    })
                }
                console.log(param)
                this.tableForm[attribute] = JSON.stringify(param)
            },
            BeforeFileUpload(file) {
                if (file.name.indexOf('.') < 0) {
                    this.$message.error('文件类型不正确，请重新选择！  ')
                    return false
                }
                if (!file.size) {
                    this.$message.error('文件大小（以字节为单位）为0!请上传有效文件')
                    return false
                }
                for (let p of this.fileList) {
                    if (file.name == p.name) {
                        this.$message.error('已存在相同文件名文件!')
                        return false
                    }
                }
                file.name = 'helloWorld'
                isPdf = false
                const isLt2M = file.size / 1024 / 1024 < 9
                if (!isLt2M) {
                    this.$message.error('文件大小不允许超过9M，请重新选择!')
                    return false
                }
                loadingState = this.$loading({
                    lock: true,
                    text: 'Loading',
                    spinner: 'el-icon-loading',
                    background: 'rgba(0, 0, 0, 0.7)'
                });
                return true
            },
            handleSuccess(response, file, fileList) {
                var that = this
                //const loading = this.$loading({
                //    lock: true,
                //    text: 'Loading',
                //    spinner: 'el-icon-loading',
                //    background: 'rgba(0, 0, 0, 0.7)'
                //});
                var paramObj = {
                    "": file.response.Content
                }
                $.ajax({
                    url: '/DingTalkServers/UploadMedia/',
                    type: 'POST',
                    data: paramObj,
                    success: function (data) {
                        data = JSON.parse(data)
                        console.log('上传文件到钉盘')
                        if (data.media_id) {
                            console.log(data.media_id)
                            fileList[fileList.length - 1]['mediaid'] = data.media_id
                        } else {
                            console.log('无media_di')
                        }
                        let param = []
                        for (let file of fileList) {
                            param.push({
                                "FileUrl": file.response.Content,
                                "MediaId": file.mediaid,
                                "FileName": file.name
                            })
                        }
                        console.log(param)
                        that.tableForm[attribute] = JSON.stringify(param)
                        console.log(that.tableForm)
                        loadingState.close()
                    }
                })
            },
        },
        created: function () {
            this.initStart()
        },

    })
</script>



